{"name":"Okeanos","tagline":"","body":"# Okeanos\r\nNode.js adapter for [Zephyros](https://github.com/sdegutis/zephyros) - the OS X window manager for hackers.\r\n\r\nThis is a fork of [`node-zephyros`](https://github.com/danielepolencic/node-zephyros) by [danielepolencic](https://github.com/danielepolencic). The main difference is that this uses a class based API where the original used a chaining system. Okeanos gives you a lot of control over objects.\r\n\r\n## Usage\r\nInclude `okeanos` in your script and you're ready to go!\r\n\r\n```coffeescript\r\nOkeanos = require 'okeanos'\r\n\r\n$ = new Okeanos()\r\n\r\n$.bind('h', ['Cmd', 'Shift']).then ->\r\n  $.window.active().then (window) ->\r\n    window.nudge -100, 0\r\n\r\n```\r\n\r\n## React to events\r\n\r\n**bind**\r\n`bind( key<String>, modifier<Array> )`\r\nListen to a particular key combination and fire the chain every time such\r\nshortcut is triggered.\r\n\r\n```coffeescript\r\n$.bind('t', ['Cmd', 'Shift']).then ->\r\n  console.log 'Hey, you pressed t+⌘⌃'\r\n```\r\n\r\n**listen**\r\n`listen( event<String> )`\r\nListen to a particular event and fire the chain every time this event occurs.\r\nA comprehensive list of events is available [here](https://github.com/sdegutis/zephyros/blob/master/Docs/Protocol.md)\r\n\r\n```coffeescript\r\n$.listen('window_created').then ->\r\n  console.log 'Hey, you created a new window!'\r\n```\r\n\r\n## Preloading\r\n\r\nThis helps a lot with callback hell.\r\n\r\n```coffeescript\r\n$.window.active().then (window) ->\r\n  window.getTitle().then (title) ->\r\n    window.getFrame().then (frame) ->\r\n      window.getScreen().then (screen) ->\r\n        console.log title, frame, screen\r\n```\r\n\r\nYou can use it by requesting all the info at the same time via `model.preload()`.\r\n\r\n```coffeescript\r\n$.window.active().then (window) ->\r\n  window.preload('title', 'frame', 'screen').then ->\r\n    console.log window.title, window.frame, window.screen\r\n```\r\n\r\nEven better is that you can use preloading directly on `okeanos.window.*`, `okeanos.screen.*` and `okeanos.app.*` methods.\r\n\r\n```coffeescript\r\n$.window.active('title', 'frame', 'screen').then (window) ->\r\n  console.log window.title, window.frame, window.screen\r\n```\r\n\r\n## Window\r\n\r\n### API\r\n\r\n**active**\r\nReturn a window object with the `id` of the focused window.\r\n\r\n```coffeescript\r\n$.window.active().then (window) ->\r\n  console.log window.id\r\n```\r\n\r\n**visible**\r\nReturn an array containing a window object for each visible window.\r\n\r\n```coffeescript\r\n$.window.visible().then (windows) ->\r\n  for window in windows\r\n    console.log window.id\r\n```\r\n\r\n**all**\r\nReturn an array containing a window object for all the windows.\r\n\r\n```coffeescript\r\n$.window.all().then (windows) ->\r\n  for window in windows\r\n    console.log window.id\r\n```\r\n\r\n### Class\r\n\r\n**getTitle()**\r\n\r\nReturns the window title as a string. Cached as `window.title`.\r\n\r\n```coffeescript\r\n$.window.active().then (window) ->\r\n  window.getTitle().then (title) ->\r\n    console.log title\r\n```\r\n\r\n**getScreen()**\r\n\r\nReturns the screen that the windows is in as a new Screen object. Cached as `window.screen`.\r\n\r\n```coffeescript\r\n$.window.active().then (window) ->\r\n  window.getScreen().then (screen) ->\r\n    console.log screen.id\r\n```\r\n\r\n**getApp()**\r\n\r\nReturns the app that created the window as a new App object. Cached as `window.app`.\r\n\r\n```coffeescript\r\n$.window.active().then (window) ->\r\n  window.getApp().then (app) ->\r\n    console.log app.id\r\n```\r\n\r\n**getFrame()**\r\n\r\nReturn the coordinates for the window frame in the format {x, y, w, h}. Cached as `window.frame`.\r\n\r\n```coffeescript\r\n$.window.active().then (window) ->\r\n  window.getFrame().then (frame) ->\r\n    console.log frame\r\n```\r\n\r\n**setFrame( {x, y, w, h} OR x, y, w, h )**\r\n\r\nSet the window frame.\r\n\r\n```coffeescript\r\n$.window.active().then (window) ->\r\n  window.getFrame().then (frame) ->\r\n    window.setFrame\r\n      x: frame.x / 2\r\n      y: frame.y / 2\r\n      w: frame.w * 2\r\n      h: frame.h * 2\r\n```\r\n\r\n**getSize()**\r\n\r\nReturn the size of the window as { w: width, h: height }.\r\n\r\n```coffeescript\r\n$.window.active().then (window) ->\r\n  window.getSize().then (size) ->\r\n    console.log 'width:', size.w,\r\n    console.log 'height:', size.h\r\n```\r\n\r\n**setSize( {w, h} OR w, h )**\r\n\r\nSet the width and height of the window frame.\r\n\r\n```coffeescript\r\n$.window.active().then (window) ->\r\n  window.setSize\r\n    w: 200\r\n    h: 300\r\n```\r\n\r\n**resize( w, h )**\r\n\r\nResize the window by adding onto the current size.\r\n\r\n```coffeescript\r\n$.window.active().then (window) ->\r\n  window.resize\r\n    w: -100\r\n    h: 200\r\n  # will shrink the width by 100px and add 200px to the height\r\n```\r\n\r\n**getPosition()**\r\n\r\nReturn the position of the top left corner of the window as { x, y }.\r\n\r\n**setPosition( {x, y} OR x, y )**\r\n\r\nSet the position of the top left corner of the window.\r\n\r\n**nudge( x, y )**\r\n\r\nSet the position of the top left corner of the window relative to it's current position.\r\n\r\n**maximize()**\r\n\r\nMaximize the window.\r\n\r\n```coffeescript\r\n$.window.active().then (window) ->\r\n  window.maximize()\r\n```\r\n\r\n**minimize()**\r\n\r\nMinimize the window.\r\n\r\n```coffeescript\r\n$.window.active().then (window) ->\r\n  window.minimize()\r\n```\r\n\r\n**unminimize()**\r\n\r\nUnminimize the window.\r\n\r\n```coffeescript\r\n$.window.active().then (window) ->\r\n  window.unminimize()\r\n```\r\n\r\n**focus()**\r\n\r\nFocus the current window.\r\n\r\n**focusTo( ['up', 'down', 'right', 'left'] )**\r\n\r\nMove the focus from this window to the specified direction.\r\n\r\n```coffeescript\r\n$.window.active().then (window) ->\r\n  window.focusTo 'right'\r\n```\r\n\r\n**getWindowsTo( ['north', 'south', 'east', 'west'] )**\r\n\r\nReturn an array of window objects for windows located on the {north, south,\r\neast, west} of this window.\r\n\r\n```coffeescript\r\n$.window.active().then (window) ->\r\n  window.getWindowsTo('north').then (windows) ->\r\n    for window in windows\r\n      console.log window.id\r\n```\r\n\r\n**getOtherWindows()**\r\n\r\nGet an array of all the other windows on the same screen. Cached as `allOtherWindows`.\r\n\r\n**getAllOtherWindows()**\r\n\r\nGet an array of all the other windows on all the screens. Cached as `allOtherWindows`.\r\n\r\n**isNormal()**\r\n\r\nCheck if the window is normal. Not sure what this means yet. Cached as `window.normal`.\r\n\r\n**isMinimized()**\r\n\r\nCheck if the window is minimized. Cached as `window.minimized`\r\n\r\n## Screen\r\n\r\n### API\r\n\r\n**main()**\r\n\r\nReturn the main screen.\r\n\r\n**all()**\r\n\r\nReturn an array of all the screens.\r\n\r\n### Class\r\n\r\n**getFrame()**\r\n\r\nGet the frame of the *usable* part of the screen -- meaning it doesn't include the dock or menu.\r\n\r\n**getFullFrame()**\r\n\r\nGet the frame of the entire screen -- including the dock and menu.\r\n\r\n**previous()**\r\n\r\nGet the previous screen.\r\n\r\n**next()**\r\n\r\nGet the next screen.\r\n\r\n**rotate( [0, 90, 180, 270 ] )**\r\n\r\nRotate the display.\r\n\r\n\r\n## App\r\n\r\n### Api\r\n\r\n**all()**\r\n\r\nReturn an array of all the running applications.\r\n\r\n```coffeescript\r\n$.app.all('title').then (apps) ->\r\n  for app in apps\r\n    console.log app.title\r\n```\r\n\r\n### Class\r\n\r\n**allWindows()**\r\n\r\nGet all the windows created by this application. Cached as `app.all`.\r\n\r\n```coffeescript\r\n$.window.active('app').then (window) ->\r\n  window.app.allWindows().then (windows) ->\r\n    console.log windows\r\n```\r\n\r\n**visibleWindows()**\r\n\r\nGet all the *visible* windows created by this application. Cached as `app.visible`.\r\n\r\n**getTitle()**\r\n\r\nGet the title of the appliation. Cached as `app.title`.\r\n\r\n**isHidden()**\r\n\r\nCheck if the app is hiden. Cached as `app.hidden`.\r\n\r\n**show()**\r\n\r\nShow the application.\r\n\r\n**hide()**\r\n\r\nHide the application.\r\n\r\n**kill()**\r\n\r\nKill the application.\r\n\r\n**kill9()**\r\n\r\nKill9 the application.\r\n\r\n## Util\r\n\r\n### Api\r\n\r\n**clipboard()**\r\n\r\nReturn a string with the content of the clipboard\r\n\r\n```coffeescript\r\n$.util.clipboard().then (clipboard) ->\r\n  console.log clipboard\r\n```\r\n\r\n**updateSettings()**\r\n\r\nTrigger an update for Zephyros settings.\r\n\r\n```coffeescript\r\n$.util.updateSettings()\r\n```\r\n\r\n**relaunch()**\r\n\r\nForce a reload of the config file.\r\n\r\n```coffeescript\r\n$.util.relaunch()\r\n```\r\n\r\n**alert( message, [duration = 1] )**\r\n\r\nPrompt an alter.\r\n\r\n```coffeescript\r\n$.util.alert 'hello world'    # show for 1 second\r\n$.util.alert 'hello world', 5 # show for 5 seconds\r\n$.util.alert\r\n  message: 'hello world'\r\n  duration: 5\r\n```\r\n\r\n**log( message )**\r\n\r\nLog a string.\r\n\r\n```coffeescript\r\n$.util.log 'hello world'\r\n```\r\n\r\n**chooseFrom( list, title, width, height )**\r\n\r\nChoose a list of items from a dynamically populated popup.\r\n\r\n```coffeescript\r\n$.util.chooseFrom(\r\n  list: ['Banana', 'Pineapple', 'Orange']\r\n  title: 'Fruits'\r\n  height: 10\r\n  width: 30\r\n).then (selected) ->\r\n  console.log selected # index of the array\r\n```\r\n\r\n**undo()**\r\n\r\nUndo the last action.\r\n\r\n```coffeescript\r\n$.window.active().then (window) ->\r\n  window.maximise()\r\n  $.util.undo()\r\n  $.util.redo()\r\n```\r\n\r\n**redo()**\r\n\r\nRedo the last action.\r\n\r\n```coffeescript\r\n$.window.active().then (window) ->\r\n  window.maximise()\r\n  $.util.undo()\r\n  $.util.redo()\r\n```\r\n\r\n## Tests\r\nTests are written in [Mocha](http://visionmedia.github.io/mocha/). Simply run\r\nthe test with:\r\n\r\n    ~$ npm test\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}